 cn := n -> coeff(orthopoly[P](n, t), t, n);
 alpha_n := n -> -(2*n-1) * cn(n-1) / ((2*n+1) * cn(n));
 beta_n := n -> cn(n) / cn(n+1);
 for n from 0 to 5 do
    print(`cn[`, n, `] = `, cn(n));
    if n > 0 then
        print(`alpha_n[`, n, `] = `, alpha_n(n));
        print(`beta_n[`, n, `] = `, beta_n(n));
    end if;
 end do;
 verify_relation := (n, t) -> simplify((n+1)*LegendreP(n+1, t) - (
 (2*n+1)*t*LegendreP(n, t) - n*LegendreP(n-1, t)));
 for n from 1 to 5 do
    print(`Relation for n=`, n, ` is `, verify_relation(n, t) = 
0);
 end do

 cn := proc (n) options operator, arrow; coeff(orthopoly[P](n, 

    t), t, n) end proc


alpha_n := proc (n) options operator, arrow; -(2*n-1)*cn(n-1)/((\

  2*n+1)*cn(n)) end proc


beta_n := proc (n) options operator, arrow; cn(n)/cn(n+1) end proc

                        cn[, 0, ] = , 1

                        cn[, 1, ] = , 1

                                        -1
                     alpha_n[, 1, ] = , --
                                        3 

                                        2
                      beta_n[, 1, ] = , -
                                        3

                                      3
                        cn[, 2, ] = , -
                                      2

                                        -2
                     alpha_n[, 2, ] = , --
                                        5 

                                        3
                      beta_n[, 2, ] = , -
                                        5

                                      5
                        cn[, 3, ] = , -
                                      2

                                        -3
                     alpha_n[, 3, ] = , --
                                        7 

                                        4
                      beta_n[, 3, ] = , -
                                        7

                                      35
                        cn[, 4, ] = , --
                                      8 

                                        -4
                     alpha_n[, 4, ] = , --
                                        9 

                                        5
                      beta_n[, 4, ] = , -
                                        9

                                      63
                        cn[, 5, ] = , --
                                      8 

                                        -5
                     alpha_n[, 5, ] = , --
                                        11

                                        6 
                      beta_n[, 5, ] = , --
                                        11

  verify_relation := proc (n, t) options operator, arrow; 

     simplify((n+1)*LegendreP(n+1, t)-(2*n+1)*t*LegendreP(n, 

     t)+n*LegendreP(n-1, t)) end proc


                Relation for n=, 1,  is , 0 = 0

                Relation for n=, 2,  is , 0 = 0

                Relation for n=, 3,  is , 0 = 0

                Relation for n=, 4,  is , 0 = 0

                Relation for n=, 5,  is , 0 = 0

 
restart;
 GaussianQuadrature := proc(n)
    local Pn, dPn, roots, weights, k, t, P;
    P := Array(1..n);
    P[1] := 1; P[2] := t;
    for k from 2 to n do
        P[k+1] := expand((2*k+1)/k*t*P[k] - (k)/(k+1)*P[k-1]);
    end do;
    Pn := P[n];
    dPn := diff(Pn, t);
    roots := [fsolve(Pn = 0, t = -1..1)];
    weights := Array(1..n);
    for k to n do
        weights[k] := 2 / ((1 - roots[k]^2) * (eval(dPn, t = 
roots[k]))^2);
    end do;
    return [roots, weights];
 end proc
GaussianQuadrature := proc (n) local Pn, dPn, roots, weights, 

   k, t, P; P := Array(1 .. n); P[1] := 1; P[2] := t; for k 

   from 2 to n do P[k+1] := expand((2*k+1)*t*P[k]/k-k*P[k-1]/(k+\

  1)) end do; Pn := P[n]; dPn := diff(Pn, t); roots := 

   [fsolve(Pn = 0, t = -1 .. 1)]; weights := Array(1 .. n); for 

   k to n do weights[k] := 2/((-roots[k]^2+1)*(eval(dPn, t = 

   roots[k]))^2) end do; return [roots, weights] end proc


TestGaussianQuadrature := module()
    option package;
    export RunTests;
    local GaussianQuadrature, PrintResults;

    GaussianQuadrature := proc(n)
        local Pn, dPn, t, roots, i, weights;
        Pn := orthopoly[P](n, t);
        dPn := diff(Pn, t);
        roots := [fsolve(Pn = 0, t = -1..1)];
        weights := [seq(2 / ((1 - roots[i]^2) * (eval(dPn, t = roots[i]))^2), i = 1..nops(roots))];
        return [roots, weights];
    end proc;

    PrintResults := proc(results, n)
        local nodes, weights, i, sumWeights;
        nodes := results[1];
        weights := results[2];
        sumWeights := add(weights[i], i = 1..nops(weights));
        printf("n = %d: Nodes = %a, Weights = %a, Sum of Weights = %f\n", n, nodes, weights, sumWeights);
    end proc;

    RunTests := proc()
        local n, results;
        for n in [3, 10, 15] do
            results := GaussianQuadrature(n);
            PrintResults(results, n);
        end do;
    end proc;

end module:

TestGaussianQuadrature:-RunTests();


n = 3: Nodes = [-.7745966692, 0., .7745966692], Weights = [.5555555558, .8888888888, .5555555558], Sum of Weights = 2.000000
n = 10: Nodes = [-.9739065285, -.8650633667, -.6794095683, -.4333953941, -.1488743390, .1488743390, .4333953941, .6794095683, .8650633667, .9739065285], Weights = [.6667134540e-1, .1494513264, .2190863630, .2692667210, .2955242250, .2955242250, .2692667210, .2190863630, .1494513264, .6667134540e-1], Sum of Weights = 2.000000
n = 15: Nodes = [-.9879925180, -.9372733924, -.8482065834, -.7244177314, -.5709721726, -.3941513471, -.2011940940, 0., .2011940940, .3941513471, .5709721726, .7244177314, .8482065834, .9372733924, .9879925180], Weights = [.3075320104e-1, .7036564800e-1, .1071590431, .1395710989, .1662690989, .1861609985, .1984314854, .2025782418, .1984314854, .1861609985, .1662690989, .1395710989, .1071590431, .7036564800e-1, .3075320104e-1], Sum of Weights = 1.999999


